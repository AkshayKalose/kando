//////////////////////////////////////////////////////////////////////////////////////////
//   _  _ ____ _  _ ___  ____                                                           //
//   |_/  |__| |\ | |  \ |  |    This file belongs to Kando, the cross-platform         //
//   | \_ |  | | \| |__/ |__|    pie menu. Read more on github.com/kando-menu/kando     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: Simon Schneegans <code@simonschneegans.de>
// SPDX-License-Identifier: MIT

#kando-menu-container {
  $root-size: 100px;
  $child-size: 50px;
  $grandchild-size: 15px;
  $connector-size: 10px;
  $item-color: rgb(255, 255, 255);
  $text-color: rgb(66, 66, 66);
  $hovered-item-color: rgb(255, 200, 200);
  $border-color: rgb(109, 109, 109);

  $connector-color: rgb(109, 109, 109);
  $connector-color-hover: rgb(172, 136, 136);
  $connector-color-active: rgb(255, 200, 200);

  $menu-transition: all 250ms cubic-bezier(0.775, 1.325, 0.535, 1);
  $text-opacity-transition: opacity 250ms ease;

  .node {
    transition: $menu-transition;
  }

  .item {
    transition: $menu-transition;
    border: 1px solid $border-color;
    color: transparent;

    // Center text.
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36px;
  }

  // Subtly scale in / out all nodes when the menu is shown and hidden.
  &.hidden .item {
    transform: scale(0.8) !important;
  }

  // The selected leaf node is scaled up to show that it has been selected.
  &.hidden .node.active:not(:has(.node)) > .item {
    transform: scale(1) !important;
  }

  // We want to delay the transition of the selected leaf node to leave time for
  // the position transition.
  &.hidden.selected .node.active:not(:has(.node)) > .item {
    transition-delay: 100ms;
  }

  // Active item.
  .node.active > .item {
    top: calc(-1 * $root-size / 2);
    left: calc(-1 * $root-size / 2);
    width: $root-size;
    height: $root-size;
    background-color: $item-color;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
    color: $text-color;
    font-size: 80px;

    transform: scale(0.9);
  }

  .node.active.hovered > .item {
    background-color: $hovered-item-color;
  }

  .node.active.dragged > .item {
    transform: scale(0.8);
  }

  .node.active:has(> .node.hovered) > .item {
    transform: scale(1);
    color: transparent;
  }

  // Child items.
  .node.parent > .item,
  .node.child > .item {
    top: calc(-1 * $child-size / 2);
    left: calc(-1 * $child-size / 2);
    width: $child-size;
    height: $child-size;
    background-color: $item-color;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
    z-index: 1;
    color: $text-color;

    transform: scale(1);
  }

  .node.parent.hovered > .item,
  .node.child.hovered > .item {
    transform: scale(1.1);
    background-color: $hovered-item-color;
  }

  .node.parent.dragged > .item,
  .node.child.dragged > .item {
    transform: scale(1);
  }

  .node.dragged {
    transition: none;
  }

  // Grandchild items.
  .node.grandchild > .item {
    top: calc(-1 * $grandchild-size / 2);
    left: calc(-1 * $grandchild-size / 2);
    width: $grandchild-size;
    height: $grandchild-size;
    background-color: $border-color;
    z-index: 0;
  }

  // Connectors.
  .connector {
    transition: $menu-transition;
    position: absolute;
    width: 0px;
    height: $connector-size;
    background-color: $connector-color;
    left: 0;
    top: calc(-1 * $connector-size / 2);
    transform-origin: 0% 50%;
    z-index: -1;
    display: none;
  }

  .node.parent > .connector,
  .node.active > .connector,
  .node.active:has(> .node.dragged) > .connector {
    display: block;
  }

  .node.hovered > .connector {
    background-color: $connector-color-hover;
  }

  .node.active > .connector {
    background-color: $connector-color-active;
  }

  .node.active:has(> .node.dragged) > .connector {
    transition: none;
  }

  // Center text
  .center-text {
    position: absolute;
    width: $root-size;
    height: $root-size;
    top: calc(-1 * $root-size / 2);
    left: calc(-1 * $root-size / 2);
    color: $text-color;
    transition: $text-opacity-transition;
    z-index: 3;

    // Center text.
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 16px;

    &.hidden {
      opacity: 0;
    }
  }
}
